{"body": "<div class=\"section\" id=\"iobridge\">\n<span id=\"id1\"></span><h1>IOBridge</h1>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> is the central and lowest-level component of <em>spray-io</em>. It provides a thin and efficient\n&#8220;adapter layer&#8221; between the network (i.e. sockets) and Akka actors.</p>\n<p>There are two sides to this &#8220;adapter layer&#8221;:</p>\n<dl class=\"docutils\">\n<dt>Outgoing network &#8220;commands&#8221;</dt>\n<dd>Command messages coming in from the application, like &#8220;connect to a certain address&#8221;, &#8220;write this series of bytes&#8221; or\n&#8220;close the connection&#8221; are applied to the respective connection/socket.</dd>\n<dt>Incoming network &#8220;events&#8221;</dt>\n<dd>Everything that happens on a socket managed by an <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt>, like the acceptance of a new connection, the reading\nof a series of bytes or the closing of the connection, is packaged in a respective event message and sent to\na &#8220;handler&#8221; actor responsible for the connection.</dd>\n</dl>\n<p>An <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> is implemented as an Akka actor using a special dispatcher, which allows it to &#8220;own&#8221; one private\nthread, from which it manages one Java NIO selector. An <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> can easily handle many thousand connections, which\ncan be any mix of incoming and outgoing (i.e. server- and client-side) connections.</p>\n<div class=\"section\" id=\"parallelism\">\n<h2>Parallelism</h2>\n<p>Depending on the <tt class=\"docutils literal\"><span class=\"pre\">parallelism</span></tt> config setting there will either only be one single <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> actor per\n<tt class=\"docutils literal\"><span class=\"pre\">ActorSystem</span></tt> (<tt class=\"docutils literal\"><span class=\"pre\">parallellism</span> <span class=\"pre\">=</span> <span class=\"pre\">1</span></tt>, the default) or several ones. For many applications a single <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> is\nperfectly capable of handling all network IO load. However, if you have a very IO-intensive application it might make\nsense to distribute IO-handling across several threads. In these cases you can increase the <tt class=\"docutils literal\"><span class=\"pre\">parallelism</span></tt> setting\nto values like 4 or 8, which causes the root <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> actor to only handle connection establishment itself and\ndistribute management of the individual connections equally across 4 or 8 &#8220;sub-bridge&#8221; actors, which are automatically\nspawned.</p>\n</div>\n<div class=\"section\" id=\"lifecycle\">\n<h2>Lifecycle</h2>\n<p>Every <tt class=\"docutils literal\"><span class=\"pre\">ActorSystem</span></tt> can only contain a single (root) <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> that you create via the <tt class=\"docutils literal\"><span class=\"pre\">ioBridge</span></tt> method of\n<em>sprays</em> <tt class=\"docutils literal\"><span class=\"pre\">IOExtension</span></tt>. Subsequent calls to this method will not create new instances but return the existing (root)\none.</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">akka.actor.ActorSystem</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.io.IOExtension</span>\n\n<span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n\n<span class=\"k\">val</span> <span class=\"n\">ioBridge</span> <span class=\"k\">=</span> <span class=\"nc\">IOExtension</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">).</span><span class=\"n\">ioBridge</span><span class=\"o\">()</span>\n\n<span class=\"c1\">// start applications actors using the ioBridge instance</span>\n<span class=\"c1\">// ...</span>\n</pre></div>\n</div>\n<p>Since an <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> is a regular Akka actor all commmunication with it happens asynchronously through messages,\nwhich can be either of type <tt class=\"docutils literal\"><span class=\"pre\">Command</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">Event</span></tt>.</p>\n</div>\n<div class=\"section\" id=\"commands\">\n<h2>Commands</h2>\n<p>Once you have an <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> instance you&#8217;ll want to send commands to it.\nThese are all the defined commands:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"c1\">// general commands not on the connection-level</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Bind</span><span class=\"o\">(</span><span class=\"n\">address</span><span class=\"k\">:</span> <span class=\"kt\">InetSocketAddress</span><span class=\"o\">,</span> <span class=\"n\">backlog</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Any</span> <span class=\"o\">=</span> <span class=\"o\">())</span> <span class=\"k\">extends</span> <span class=\"nc\">Command</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Unbind</span><span class=\"o\">(</span><span class=\"n\">bindingKey</span><span class=\"k\">:</span> <span class=\"kt\">Key</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Command</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Connect</span><span class=\"o\">(</span><span class=\"n\">remoteAddress</span><span class=\"k\">:</span> <span class=\"kt\">InetSocketAddress</span><span class=\"o\">,</span>\n                   <span class=\"n\">localAddress</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">InetSocketAddress</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">None</span><span class=\"o\">,</span>\n                   <span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Any</span> <span class=\"o\">=</span> <span class=\"o\">())</span> <span class=\"k\">extends</span> <span class=\"nc\">Command</span>\n<span class=\"k\">object</span> <span class=\"nc\">Connect</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">host</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Connect</span> <span class=\"o\">=</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">host</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"o\">,</span> <span class=\"o\">())</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">host</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Connect</span> <span class=\"o\">=</span>\n    <span class=\"nc\">Connect</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">InetSocketAddress</span><span class=\"o\">(</span><span class=\"n\">host</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"o\">),</span> <span class=\"nc\">None</span><span class=\"o\">,</span> <span class=\"n\">tag</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n<span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">GetStats</span> <span class=\"k\">extends</span> <span class=\"nc\">Command</span>\n\n<span class=\"c1\">// connection-level commands</span>\n<span class=\"k\">trait</span> <span class=\"nc\">ConnectionCommand</span> <span class=\"k\">extends</span> <span class=\"nc\">Command</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span>\n<span class=\"o\">}</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Register</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">ConnectionCommand</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Close</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">,</span>\n                 <span class=\"n\">reason</span><span class=\"k\">:</span> <span class=\"kt\">CloseCommandReason</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">ConnectionCommand</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Send</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">,</span>\n                <span class=\"n\">buffers</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">ByteBuffer</span><span class=\"o\">],</span>\n                <span class=\"n\">ack</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Any</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">None</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">ConnectionCommand</span>\n<span class=\"k\">object</span> <span class=\"nc\">Send</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"k\">:</span> <span class=\"kt\">ByteBuffer</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Send</span> <span class=\"o\">=</span>\n    <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"o\">,</span> <span class=\"nc\">None</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"k\">:</span> <span class=\"kt\">ByteBuffer</span><span class=\"o\">,</span> <span class=\"n\">ack</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Any</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Send</span> <span class=\"o\">=</span>\n    <span class=\"k\">new</span> <span class=\"nc\">Send</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"o\">,</span> <span class=\"n\">buffer</span> <span class=\"o\">::</span> <span class=\"nc\">Nil</span><span class=\"o\">,</span> <span class=\"n\">ack</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">StopReading</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">ConnectionCommand</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">ResumeReading</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">ConnectionCommand</span>\n</pre></div>\n</div>\n<p>And here is what action they instruct the bridge to perform:</p>\n<dl class=\"docutils\">\n<dt>Bind</dt>\n<dd>Start listening for incoming connections on a particular port. The sender receives a <tt class=\"docutils literal\"><span class=\"pre\">Bound</span></tt> event upon completion\nas well as <tt class=\"docutils literal\"><span class=\"pre\">Connected</span></tt> events for each new incoming connection that has been accepted.</dd>\n<dt>Unbind</dt>\n<dd>Revert a previous <tt class=\"docutils literal\"><span class=\"pre\">Bind</span></tt>. The sender receives an <tt class=\"docutils literal\"><span class=\"pre\">Unbound</span></tt> event upon completion.</dd>\n<dt>Connect</dt>\n<dd>Connect to remote address. The sender receives a <tt class=\"docutils literal\"><span class=\"pre\">Connected</span></tt> event upon completion.</dd>\n<dt>GetStats</dt>\n<dd>Send the sender an <tt class=\"docutils literal\"><span class=\"pre\">IOBridge.StatsMap</span></tt> message containing simple statistics for the root bridge and all potentially\nexisting sub-bridges.</dd>\n<dt>Register</dt>\n<dd>Register the given <tt class=\"docutils literal\"><span class=\"pre\">Handle</span></tt> that was newly created as a result of a <tt class=\"docutils literal\"><span class=\"pre\">Connected</span></tt> event and start accepting\nincoming data on its connection.</dd>\n<dt>Close</dt>\n<dd>Close the connection of the given <tt class=\"docutils literal\"><span class=\"pre\">Handle</span></tt>. If there are pending <tt class=\"docutils literal\"><span class=\"pre\">Send</span></tt> commands that haven&#8217;t yet been completed\nthe closing is queued. Special case: If the <tt class=\"docutils literal\"><span class=\"pre\">reason</span></tt> is <tt class=\"docutils literal\"><span class=\"pre\">ConfirmedClose</span></tt> the socket is not closed right away, but\nrather via a full TCP FIN message exchange is performed. I.e. at first a TCP FIN message is sent and the peers\n&#8220;ack&#8217;ing&#8221; FIN is awaited before the socket is closed.\nIndependently of when the socket is actually closed the handler of the connection receives a <tt class=\"docutils literal\"><span class=\"pre\">Closed</span></tt> event after\nit has happened.</dd>\n<dt>Send</dt>\n<dd>Write the contents of the given ByteBuffers to the socket associated with the given handle. If <tt class=\"docutils literal\"><span class=\"pre\">ack</span></tt> is defined the\nsender receives its content as a &#8220;send confirmation&#8221; message when all bytes have been successfully written to the\nsocket.</dd>\n<dt>StopReading</dt>\n<dd>Stop accepting incoming data from the socket associated with the given handle.</dd>\n<dt>ResumeReading</dt>\n<dd>Resume accepting incoming data from the socket associated with the given handle.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"events\">\n<h2>Events</h2>\n<p>These are all the events that are generated by an <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> instance:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"c1\">// &quot;general&quot; events not on the connection-level</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Bound</span><span class=\"o\">(</span><span class=\"n\">bindingKey</span><span class=\"k\">:</span> <span class=\"kt\">Key</span><span class=\"o\">,</span> <span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Event</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Unbound</span><span class=\"o\">(</span><span class=\"n\">bindingKey</span><span class=\"k\">:</span> <span class=\"kt\">Key</span><span class=\"o\">,</span> <span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Event</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Connected</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"k\">:</span> <span class=\"kt\">Key</span><span class=\"o\">,</span> <span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Event</span>\n\n<span class=\"c1\">// connection-level events</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Closed</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">,</span> <span class=\"n\">reason</span><span class=\"k\">:</span> <span class=\"kt\">ClosedEventReason</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Event</span> <span class=\"k\">with</span> <span class=\"nc\">IOClosed</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Received</span><span class=\"o\">(</span><span class=\"n\">handle</span><span class=\"k\">:</span> <span class=\"kt\">Handle</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"k\">:</span> <span class=\"kt\">ByteBuffer</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Event</span>\n</pre></div>\n</div>\n<p>And these are their semantics:</p>\n<dl class=\"docutils\">\n<dt>Bound</dt>\n<dd>Sent as confirmation to the sender of a preceding <tt class=\"docutils literal\"><span class=\"pre\">Bind</span></tt> command.</dd>\n<dt>Unbound</dt>\n<dd>Sent as confirmation to the sender of a preceding <tt class=\"docutils literal\"><span class=\"pre\">Unbind</span></tt> command.</dd>\n<dt>Connected</dt>\n<dd>Sent after a new connection has been established to the sender of a preceding <tt class=\"docutils literal\"><span class=\"pre\">Bind</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">Connect</span></tt> command.</dd>\n<dt>Closed</dt>\n<dd>Sent to the handler actor after a connection has been closed.</dd>\n<dt>Received</dt>\n<dd>Sent to the handler actor after a chunk of data has been read from the connections socket. Will never contain more\nthan the number of bytes configured as <tt class=\"docutils literal\"><span class=\"pre\">read-buffer-size</span></tt> in the <tt class=\"docutils literal\"><span class=\"pre\">IOBridgeSettings</span></tt>.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"handle\">\n<h2>Handle</h2>\n<p>An <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> identifies connections using a &#8220;handle&#8221;, which can be any object implementing in the <tt class=\"docutils literal\"><span class=\"pre\">Handle</span></tt>\ninterface:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Handle</span> <span class=\"o\">{</span>\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * The key identifying the connection.</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">key</span><span class=\"k\">:</span> <span class=\"kt\">Key</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * The actor handling events coming in from the network.</span>\n<span class=\"cm\">   * If ConnectionActors are used this is the connection actor.</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">handler</span><span class=\"k\">:</span> <span class=\"kt\">ActorRef</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * A custom, application-defined tag object that can be attached</span>\n<span class=\"cm\">   * to a `Bind` or `Connect` command and is made available to the application</span>\n<span class=\"cm\">   * through the handle. Currently it is used for connection-specific</span>\n<span class=\"cm\">   * enabling/disabling of encryption (see `SslTlsSupport.Enabling` trait)</span>\n<span class=\"cm\">   * or for custom log marking (see `LogMarking` trait).</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Any</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>The creation of actual handle instances is delegated to the user. This enables the lookup-free implementation of the\napplication logic, since all connection-specific event messages always carry the handle instance that was created by\nthe application and, as such, provide direct access to application data.</p>\n<p>The typical pattern is that the application creates a new <tt class=\"docutils literal\"><span class=\"pre\">Handle</span></tt> instance after the reception of a <tt class=\"docutils literal\"><span class=\"pre\">Connected</span></tt>\nevent, which is the only way to get a hold of the required <tt class=\"docutils literal\"><span class=\"pre\">Key</span></tt> for the handle. After handle creation the application\nthen registers it with the <tt class=\"docutils literal\"><span class=\"pre\">IOBridge</span></tt> via a <tt class=\"docutils literal\"><span class=\"pre\">Register</span></tt> command.</p>\n</div>\n</div>\n", "display_toc": true, "title": "IOBridge", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-io/io-bridge", "next": {"link": "../io-client/", "title": "IOClient"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-io/io-client", "IOClient", "N", "next"], ["documentation/spray-io/configuration", "Configuration", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-io"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">IOBridge</a><ul>\n<li><a class=\"reference internal\" href=\"#parallelism\">Parallelism</a></li>\n<li><a class=\"reference internal\" href=\"#lifecycle\">Lifecycle</a></li>\n<li><a class=\"reference internal\" href=\"#commands\">Commands</a></li>\n<li><a class=\"reference internal\" href=\"#events\">Events</a></li>\n<li><a class=\"reference internal\" href=\"#handle\">Handle</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../configuration/", "title": "Configuration"}, "metatags": ""}
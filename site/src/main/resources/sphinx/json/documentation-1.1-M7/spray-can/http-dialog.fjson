{"body": "<div class=\"section\" id=\"httpdialog\">\n<span id=\"id1\"></span><h1>HttpDialog</h1>\n<p>As a thin layer on top of the rather low-level <a class=\"reference internal\" href=\"../http-client/#httpclient\"><em>HttpClient</em></a> <em>spray-can</em> provides a convenience mini-DSL that makes\nworking with HTTP connections a bit easier. An <tt class=\"docutils literal\"><span class=\"pre\">HttpDialog</span></tt> encapsulates an exchange of HTTP messages over the course\nof <em>one single connection</em> and provides a fluent API for constructing a &#8220;chain&#8221; of scheduled tasks, which define what to\ndo over the course of the message exchange with the server.</p>\n<p>It is probably best explained by example.</p>\n<p>The following snippet shows a minimal, single-request <tt class=\"docutils literal\"><span class=\"pre\">HttpDialog</span></tt>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">java.util.concurrent.TimeUnit._</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.concurrent.Future</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.concurrent.duration.Duration</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.can.client.</span><span class=\"o\">{</span><span class=\"nc\">HttpDialog</span><span class=\"o\">,</span> <span class=\"nc\">HttpClient</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.io._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n<span class=\"k\">import</span> <span class=\"nn\">HttpMethods._</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n<span class=\"k\">val</span> <span class=\"n\">ioBridge</span> <span class=\"k\">=</span> <span class=\"nc\">IOExtension</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">).</span><span class=\"n\">ioBridge</span><span class=\"o\">()</span>\n<span class=\"k\">val</span> <span class=\"n\">client</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span><span class=\"o\">(</span><span class=\"nc\">Props</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">HttpClient</span><span class=\"o\">(</span><span class=\"n\">ioBridge</span><span class=\"o\">)))</span>\n\n<span class=\"k\">val</span> <span class=\"n\">response</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n  <span class=\"nc\">HttpDialog</span><span class=\"o\">(</span><span class=\"n\">client</span><span class=\"o\">,</span> <span class=\"n\">targetHostName</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">HttpRequest</span><span class=\"o\">(</span><span class=\"n\">method</span> <span class=\"k\">=</span> <span class=\"nc\">GET</span><span class=\"o\">,</span> <span class=\"n\">uri</span> <span class=\"k\">=</span> <span class=\"s\">&quot;/&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">end</span>\n</pre></div>\n</div>\n<p>The dialog opens a connection to a given host/port, fires one request and returns a future on the response. The\nconnection is automatically closed after the response has come in.</p>\n<p>An <tt class=\"docutils literal\"><span class=\"pre\">HttpDialog</span></tt> can also be used to fire several requests across a connection. Here is a non-pipelined two-request\ndialog, this time using the <tt class=\"docutils literal\"><span class=\"pre\">RequestBuilding</span></tt> helper from <a class=\"reference internal\" href=\"../../spray-httpx/#spray-httpx\"><em>spray-httpx</em></a>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.httpx.RequestBuilding._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">responses</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]]</span> <span class=\"k\">=</span>\n  <span class=\"nc\">HttpDialog</span><span class=\"o\">(</span><span class=\"n\">client</span><span class=\"o\">,</span> <span class=\"n\">targetHostName</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">Post</span><span class=\"o\">(</span><span class=\"s\">&quot;/shout&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;yeah!&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">awaitResponse</span>\n  <span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">Put</span><span class=\"o\">(</span><span class=\"s\">&quot;/count&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;42&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">end</span>\n</pre></div>\n</div>\n<p>Two requests are fired across the connection, with the second only going out after the response to the first one\nhas come in. The result is now a future on several responses.</p>\n<p>Let&#8217;s look at a pipelined three-request dialog:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">responses</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]]</span> <span class=\"k\">=</span>\n  <span class=\"nc\">HttpDialog</span><span class=\"o\">(</span><span class=\"n\">client</span><span class=\"o\">,</span> <span class=\"n\">targetHostName</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/img/a.gif&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/img/b.gif&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/img/c.gif&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">end</span>\n</pre></div>\n</div>\n<p>This snippet fires three requests in a row across the connection, without waiting for responses in between. The result\nis again a future on several responses.</p>\n<p>You can create &#8220;request -&gt; response -&gt; request&#8221; dialogs like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">response</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n  <span class=\"nc\">HttpDialog</span><span class=\"o\">(</span><span class=\"n\">client</span><span class=\"o\">,</span> <span class=\"n\">targetHostName</span><span class=\"o\">,</span> <span class=\"n\">port</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/ping&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/ping2&quot;</span><span class=\"o\">,</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">))</span>\n  <span class=\"o\">.</span><span class=\"n\">end</span>\n</pre></div>\n</div>\n<p>Here the second request is built using the response to the first. The result is a future on a single response, namely\nthe last one.</p>\n<p>As you can see an <tt class=\"docutils literal\"><span class=\"pre\">HttpDialog</span></tt> can be convenient and light-weight tool to quickly fire a few requests. However, it\nonly works with one single HTTP connection and doesn&#8217;t support a higher-level features (like redirection following).\nIf you need something more powerful check out the <a class=\"reference internal\" href=\"../../spray-client/#spray-client\"><em>spray-client</em></a> module.</p>\n</div>\n", "display_toc": false, "title": "HttpDialog", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-can/http-dialog", "next": {"link": "../examples/", "title": "Examples"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-can/examples", "Examples", "N", "next"], ["documentation/spray-can/http-client", "HttpClient", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-can"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">HttpDialog</a></li>\n</ul>\n", "prev": {"link": "../http-client/", "title": "HttpClient"}, "metatags": ""}
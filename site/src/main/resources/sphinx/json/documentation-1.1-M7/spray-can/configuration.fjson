{"body": "<div class=\"section\" id=\"configuration\">\n<span id=\"spray-can-configuration\"></span><h1>Configuration</h1>\n<p>Just like Akka <em>spray-can</em> relies on the <a class=\"reference external\" href=\"https://github.com/typesafehub/config\">typesafe config</a> library for configuration. As such its JAR contains a\n<tt class=\"docutils literal\"><span class=\"pre\">reference.conf</span></tt> file holding the default values of all configuration settings. In your application you typically\nprovide an <tt class=\"docutils literal\"><span class=\"pre\">application.conf</span></tt>, in which you override Akka and/or <em>spray</em> settings according to your needs.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Since <em>spray</em> uses the same configuration technique as Akka you might want to check out the\n<a class=\"reference external\" href=\"http://doc.akka.io/docs/akka/2.0.4/general/configuration.html\">Akka Documentation on Configuration</a>.</p>\n</div>\n<p>This is the <tt class=\"docutils literal\"><span class=\"pre\">reference.conf</span></tt> of the <em>spray-can</em> module:</p>\n<div class=\"highlight-bash\"><div class=\"highlight\"><pre><span class=\"c\">###################################</span>\n<span class=\"c\"># spray-can Reference Config File #</span>\n<span class=\"c\">###################################</span>\n\n<span class=\"c\"># This is the reference config file that contains all the default settings.</span>\n<span class=\"c\"># Make your edits/overrides in your application.conf.</span>\n\nspray.can <span class=\"o\">{</span>\n  server <span class=\"o\">{</span>\n    <span class=\"c\"># the value of the server header to produce</span>\n    <span class=\"c\"># Set to the empty string to disable rendering of the server header.</span>\n    server-header <span class=\"o\">=</span> spray-can/<span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.version</span><span class=\"k\">}</span>\n\n    <span class=\"c\"># Enables/disables SSL encryption</span>\n    <span class=\"c\"># If enabled the server uses the implicit ServerSSLEngineProvider parameter of the</span>\n    <span class=\"c\"># server actor constructor to create SSLEngines for the underlying IO connection</span>\n    ssl-encryption <span class=\"o\">=</span> off\n\n    <span class=\"c\"># the maximum number of requests that are accepted (and dispatched to</span>\n    <span class=\"c\"># the application) on one single connection before the first request</span>\n    <span class=\"c\"># has to be completed</span>\n    <span class=\"c\"># Incoming requests that would cause the pipelining limit to be exceeded are not</span>\n    <span class=\"c\"># read from the connections socket so as to build up &quot;back-pressure&quot; to the</span>\n    <span class=\"c\"># client via TCP flow control.</span>\n    <span class=\"c\"># A setting of 1 disables HTTP pipelining, since only one request per</span>\n    <span class=\"c\"># connection can be &quot;open&quot; (i.e. being processed by the application) at any time.</span>\n    <span class=\"c\"># Set to higher values to enable HTTP pipelining.</span>\n    <span class=\"c\"># This value must be &gt; 0 and &lt;= 128</span>\n    pipelining-limit <span class=\"o\">=</span> 8\n\n    <span class=\"c\"># the time after which an idle connection will be automatically closed</span>\n    <span class=\"c\"># Set to zero to completely disable idle connection timeouts.</span>\n    idle-timeout <span class=\"o\">=</span> 120 s\n\n    <span class=\"c\"># If a request hasn&#39;t been responded to after the time period set here</span>\n    <span class=\"c\"># a spray.http.Timeout message will be sent to the timeout handler.</span>\n    <span class=\"c\"># Set to zero to completely disable request timeouts.</span>\n    request-timeout <span class=\"o\">=</span> 30 s\n\n    <span class=\"c\"># After a Timeout message has been sent to the timeout handler and the</span>\n    <span class=\"c\"># request still hasn&#39;t been completed after the time period set here</span>\n    <span class=\"c\"># the server will complete the request itself with an error response.</span>\n    <span class=\"c\"># Set to zero to disable timeout timeouts.</span>\n    timeout-timeout <span class=\"o\">=</span> 500 ms\n\n    <span class=\"c\"># the path of the actor to send spray.http.Timeout messages to</span>\n    <span class=\"c\"># If empty all Timeout messages will go to the &quot;regular&quot; request handling actor.</span>\n    timeout-handler <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"c\"># the &quot;granularity&quot; of timeout checking for both idle connections timeouts</span>\n    <span class=\"c\"># as well as request timeouts, should rarely be needed to modify</span>\n    reaping-cycle <span class=\"o\">=</span> 100 ms\n\n    <span class=\"c\"># Enables/disables support for statistics collection and querying.</span>\n    <span class=\"c\"># Even though stats keeping overhead is small,</span>\n    <span class=\"c\"># for maximum performance switch off when not needed.</span>\n    stats-support <span class=\"o\">=</span> on\n\n    <span class=\"c\"># Enables/disables the adding of a `Remote-Address` header</span>\n    <span class=\"c\"># holding the clients (remote) IP address.</span>\n    remote-address-header <span class=\"o\">=</span> off\n\n    <span class=\"c\"># Enables/disables automatic handling of HEAD requests.</span>\n    <span class=\"c\"># If this setting is enabled the server dispatches HEAD requests as GET requests to the</span>\n    <span class=\"c\"># application and automatically strips off all message bodies from outgoing responses.</span>\n    <span class=\"c\"># Note that, even when this setting is &#39;off&#39; the server will never send out message</span>\n    <span class=\"c\"># bodies on responses to HEAD requests.</span>\n    transparent-head-requests <span class=\"o\">=</span> on\n\n    <span class=\"c\"># Enables/disables an alternative response streaming mode that doesn&#39;t</span>\n    <span class=\"c\"># use &quot;Transfer-Encoding: chunked&quot; but rather renders the individual MessageChunks</span>\n    <span class=\"c\"># coming in from the application as parts of the original response entity.</span>\n    <span class=\"c\"># Enabling this mode causes all connections to be closed after a streaming response</span>\n    <span class=\"c\"># has been finished since there is no other way to signal the response end to the client.</span>\n    <span class=\"c\"># Note that chunkless-streaming is implicitly enabled when response streaming to</span>\n    <span class=\"c\"># HTTP/1.0 clients (since they don&#39;t support &quot;Transfer-Encoding: chunked&quot;)</span>\n    chunkless-streaming <span class=\"o\">=</span> off\n\n    <span class=\"c\"># Enables/disables the returning of more detailed error messages to</span>\n    <span class=\"c\"># the client in the error response</span>\n    <span class=\"c\"># Should be disabled for browser-facing APIs due to the risk of XSS attacks</span>\n    <span class=\"c\"># and (probably) enabled for internal or non-browser APIs</span>\n    <span class=\"c\"># (Note that spray will always produce log messages containing the full error details)</span>\n    verbose-error-messages <span class=\"o\">=</span> off\n\n    <span class=\"c\"># If this setting is non-zero the HttpServer automatically aggregates incoming</span>\n    <span class=\"c\"># request chunks into full HttpRequests before dispatching them to the application.</span>\n    <span class=\"c\"># If the size of the aggregated requests surpasses the specified limit the server</span>\n    <span class=\"c\"># will respond with a &#39;413 Request Entity Too Large&#39; error response before closing</span>\n    <span class=\"c\"># the connection. Set to zero to disable automatic request chunk aggregation and</span>\n    <span class=\"c\"># have ChunkedRequestStart, MessageChunk and ChunkedMessageEnd messages be dispatched</span>\n    <span class=\"c\"># to the application.</span>\n    request-chunk-aggregation-limit <span class=\"o\">=</span> 1m\n\n    <span class=\"c\"># the initial size if the buffer to render the response in</span>\n    <span class=\"c\"># can be used for fine-tuning response rendering performance but probably doesn&#39;t</span>\n    <span class=\"c\"># have to be fiddled with in most applications</span>\n    response-size-hint <span class=\"o\">=</span> 1k\n\n    <span class=\"c\"># modify to tweak parsing settings on the server-side only</span>\n    <span class=\"nv\">parsing</span> <span class=\"o\">=</span> <span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.can.parsing</span><span class=\"k\">}</span>\n  <span class=\"o\">}</span>\n\n  client <span class=\"o\">{</span>\n    <span class=\"c\"># the value of the user-agent header to produce, set to the empty string</span>\n    <span class=\"c\"># to disable rendering of the user-agent header</span>\n    user-agent-header <span class=\"o\">=</span> spray-can/<span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.version</span><span class=\"k\">}</span>\n\n    <span class=\"c\"># the time after which an idle connection will be automatically closed</span>\n    <span class=\"c\"># set to zero to completely disable idle timeouts</span>\n    idle-timeout <span class=\"o\">=</span> 10 s\n\n    <span class=\"c\"># if a request hasn&#39;t been responded to after the time period set here the connection</span>\n    <span class=\"c\"># will be closed and the application will receive a respective `Closed` message .</span>\n    <span class=\"c\"># set to zero to completely disable request timeouts</span>\n    request-timeout <span class=\"o\">=</span> 5 s\n\n    <span class=\"c\"># the &quot;granularity&quot; of timeout checking for both idle connections timeouts</span>\n    <span class=\"c\"># as well as request timeouts, should rarely be needed to modify</span>\n    reaping-cycle <span class=\"o\">=</span> 100 ms\n\n    <span class=\"c\"># If this setting is non-zero the HttpClient automatically aggregates incoming</span>\n    <span class=\"c\"># response chunks into full HttpResponses before dispatching them to the application.</span>\n    <span class=\"c\"># If the size of the aggregated response surpasses the specified limit the HttpClient</span>\n    <span class=\"c\"># will close the connection and return an error.</span>\n    <span class=\"c\"># Set to zero to disable automatic request chunk aggregation and have</span>\n    <span class=\"c\"># ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be dispatched</span>\n    <span class=\"c\"># to the application.</span>\n    response-chunk-aggregation-limit <span class=\"o\">=</span> 1m\n\n    <span class=\"c\"># the initial size if the buffer to render the request in</span>\n    <span class=\"c\"># can be used for fine-tuning request rendering performance but probably doesn&#39;t</span>\n    <span class=\"c\"># have to be fiddled with in most applications</span>\n    request-size-hint <span class=\"o\">=</span> 512\n\n    <span class=\"c\"># modify to tweak parsing settings on the client-side only</span>\n    <span class=\"nv\">parsing</span> <span class=\"o\">=</span> <span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.can.parsing</span><span class=\"k\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"c\"># The (default) configuration of the HTTP message parser for the server and the client</span>\n  parsing <span class=\"o\">{</span>\n    max-uri-length             <span class=\"o\">=</span> 2k\n    max-response-reason-length <span class=\"o\">=</span> 64\n    max-header-name-length     <span class=\"o\">=</span> 64\n    max-header-value-length    <span class=\"o\">=</span> 8k\n    max-header-count           <span class=\"o\">=</span> 64\n    max-content-length         <span class=\"o\">=</span> 8m\n    max-chunk-ext-name-length  <span class=\"o\">=</span> 64\n    max-chunk-ext-value-length <span class=\"o\">=</span> 256\n    max-chunk-ext-count        <span class=\"o\">=</span> 16\n    max-chunk-size             <span class=\"o\">=</span> 1m\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n", "display_toc": false, "title": "Configuration", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-can/configuration", "next": {"link": "../http-server/", "title": "HttpServer"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-can/http-server", "HttpServer", "N", "next"], ["documentation/spray-can/installation", "Installation", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-can"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Configuration</a></li>\n</ul>\n", "prev": {"link": "../installation/", "title": "Installation"}, "metatags": ""}